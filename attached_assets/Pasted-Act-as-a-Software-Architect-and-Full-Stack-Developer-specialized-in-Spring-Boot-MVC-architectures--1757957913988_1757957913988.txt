Act as a Software Architect and Full-Stack Developer specialized in Spring Boot, MVC architectures, and Thymeleaf front-ends. Build a simple yet functional queue/ticketing system for a small waiting room, with runnable code and a clear README. Do not use React, TypeScript, or Tailwind. Use Spring Boot + MVC + Thymeleaf + vanilla JS only.

Role & Goal

Role: Architect + Developer delivering a maintainable MVC app.

Goal: A working system where a kiosk issues tickets for Advisory (A) or Cashier (C); an operator panel advances the next ticket per queue; and a hall display (TV) shows updates in real time.

Functional Requirements

Queues & Ticket format

Two queues: A = Advisory, C = Cashier.

Ticket ID format: prefix + 3-digit counter (A-001, C-001, …).

Pages (Thymeleaf views)

/kiosk: Two large buttons “Tomar turno A” and “Tomar turno C”. On tap, create and display the ticket ({ id: "A-00X" }).

/operator: Takes a role param (?role=A or ?role=C) or a role selector on load. Shows only that queue with a “Next ticket” button. Prevent double clicks/race conditions.

/hall: Fullscreen TV view: shows current ticket per queue and a small history (last 3). On new announcement, highlight + short chime.

Routing & Visibility

Operator A only sees/advances A; Operator C only C.

Real-time channels/topics must be queue-scoped (e.g., /topic/queue/A, /topic/queue/C).

Real-time

Implement immediate updates to /hall when operator presses “Next”.

Use Spring WebSocket (STOMP/SockJS) or SSE. Justify the choice and implement it.

State & Reset

No database: keep counters/queues in memory.

Daily reset at midnight (server TZ) with @Scheduled, counters return to 0.

API (minimum)

POST /api/tickets/{queue} ({queue} ∈ {A,C}) → creates a ticket, returns { "id": "A-001" }.

POST /api/tickets/{queue}/next → announces next ticket for that queue and emits the real-time event.

GET /api/state → current ticket per queue + last 3 announced per queue.

Security (minimal)

/operator protected by a simple PIN (config via environment variable). No user management.

UX & Accessibility

Spanish labels. Large typography for TV, high contrast, focus states, basic ARIA.

Provide a short bell audio asset (royalty-free) or a minimal embedded tone.

Architecture & Code Organization (MVC)

Packages:

config (WebSocket/SSE config, CORS if needed, scheduling),

controller (MVC + REST controllers),

service (business logic for queues, atomic “next”),

model (Ticket, enums/VOs),

util (formatting, padding).

Views (Thymeleaf): templates/kiosk.html, templates/operator.html, templates/hall.html.

Static assets: static/js/*.js, static/css/*.css, static/audio/chime.mp3.

Concurrency & Atomicity

Ensure atomic “next” operations per queue (e.g., ConcurrentLinkedQueue, AtomicInteger, or synchronized blocks).

Prevent double-announce on rapid clicks.

Deliverables

Short architecture summary (text diagram) + key decisions with pros/cons (WebSocket vs SSE; concurrency method; scheduler).

Repo tree (folders/files).

Complete code (Spring Boot + Thymeleaf + vanilla JS).

README.md with prerequisites and single-command run (./mvnw spring-boot:run), ports, and how to open /kiosk, /operator?role=A|C, /hall.

Tests:

Unit tests for ID formatting (prefix + padded counter) and next-ticket logic (empty/non-empty queue).

Manual test checklist (create A-001, C-001; press Next in A; TV updates only A; C remains unchanged; simulate daily reset).

Acceptance Criteria

Tickets generated correctly per queue with prefix + padded counter.

Pressing “Next” in /operator?role=A updates only A on /hall instantly (and similarly for C).

No DB; in-memory state; daily reset works.

/kiosk, /operator, /hall run in parallel without conflicts.

Clean MVC structure with Thymeleaf views; clear README; one-command startup.